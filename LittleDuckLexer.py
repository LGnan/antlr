# Generated from LittleDuckLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,209,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
        2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        5,12,129,8,12,10,12,12,12,132,9,12,1,13,4,13,135,8,13,11,13,12,13,
        136,1,14,4,14,140,8,14,11,14,12,14,141,1,14,1,14,4,14,146,8,14,11,
        14,12,14,147,1,15,1,15,1,15,1,15,5,15,154,8,15,10,15,12,15,157,9,
        15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,
        21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
        27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,5,31,196,
        8,31,10,31,12,31,199,9,31,1,31,1,31,1,32,4,32,204,8,32,11,32,12,
        32,205,1,32,1,32,0,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,48,57,2,0,34,34,92,92,2,0,10,10,13,13,3,0,9,10,13,13,32,
        32,216,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,75,1,0,0,
        0,5,80,1,0,0,0,7,84,1,0,0,0,9,88,1,0,0,0,11,92,1,0,0,0,13,98,1,0,
        0,0,15,103,1,0,0,0,17,106,1,0,0,0,19,111,1,0,0,0,21,117,1,0,0,0,
        23,120,1,0,0,0,25,126,1,0,0,0,27,134,1,0,0,0,29,139,1,0,0,0,31,149,
        1,0,0,0,33,160,1,0,0,0,35,162,1,0,0,0,37,164,1,0,0,0,39,166,1,0,
        0,0,41,168,1,0,0,0,43,170,1,0,0,0,45,173,1,0,0,0,47,175,1,0,0,0,
        49,177,1,0,0,0,51,179,1,0,0,0,53,181,1,0,0,0,55,183,1,0,0,0,57,185,
        1,0,0,0,59,187,1,0,0,0,61,189,1,0,0,0,63,191,1,0,0,0,65,203,1,0,
        0,0,67,68,5,112,0,0,68,69,5,114,0,0,69,70,5,111,0,0,70,71,5,103,
        0,0,71,72,5,114,0,0,72,73,5,97,0,0,73,74,5,109,0,0,74,2,1,0,0,0,
        75,76,5,109,0,0,76,77,5,97,0,0,77,78,5,105,0,0,78,79,5,110,0,0,79,
        4,1,0,0,0,80,81,5,101,0,0,81,82,5,110,0,0,82,83,5,100,0,0,83,6,1,
        0,0,0,84,85,5,118,0,0,85,86,5,97,0,0,86,87,5,114,0,0,87,8,1,0,0,
        0,88,89,5,105,0,0,89,90,5,110,0,0,90,91,5,116,0,0,91,10,1,0,0,0,
        92,93,5,102,0,0,93,94,5,108,0,0,94,95,5,111,0,0,95,96,5,97,0,0,96,
        97,5,116,0,0,97,12,1,0,0,0,98,99,5,118,0,0,99,100,5,111,0,0,100,
        101,5,105,0,0,101,102,5,100,0,0,102,14,1,0,0,0,103,104,5,105,0,0,
        104,105,5,102,0,0,105,16,1,0,0,0,106,107,5,101,0,0,107,108,5,108,
        0,0,108,109,5,115,0,0,109,110,5,101,0,0,110,18,1,0,0,0,111,112,5,
        119,0,0,112,113,5,104,0,0,113,114,5,105,0,0,114,115,5,108,0,0,115,
        116,5,101,0,0,116,20,1,0,0,0,117,118,5,100,0,0,118,119,5,111,0,0,
        119,22,1,0,0,0,120,121,5,112,0,0,121,122,5,114,0,0,122,123,5,105,
        0,0,123,124,5,110,0,0,124,125,5,116,0,0,125,24,1,0,0,0,126,130,7,
        0,0,0,127,129,7,1,0,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,
        0,0,0,130,131,1,0,0,0,131,26,1,0,0,0,132,130,1,0,0,0,133,135,7,2,
        0,0,134,133,1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,
        0,0,137,28,1,0,0,0,138,140,7,2,0,0,139,138,1,0,0,0,140,141,1,0,0,
        0,141,139,1,0,0,0,141,142,1,0,0,0,142,143,1,0,0,0,143,145,5,46,0,
        0,144,146,7,2,0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,
        0,147,148,1,0,0,0,148,30,1,0,0,0,149,155,5,34,0,0,150,154,8,3,0,
        0,151,152,5,92,0,0,152,154,9,0,0,0,153,150,1,0,0,0,153,151,1,0,0,
        0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,158,1,0,0,
        0,157,155,1,0,0,0,158,159,5,34,0,0,159,32,1,0,0,0,160,161,5,43,0,
        0,161,34,1,0,0,0,162,163,5,45,0,0,163,36,1,0,0,0,164,165,5,42,0,
        0,165,38,1,0,0,0,166,167,5,47,0,0,167,40,1,0,0,0,168,169,5,61,0,
        0,169,42,1,0,0,0,170,171,5,33,0,0,171,172,5,61,0,0,172,44,1,0,0,
        0,173,174,5,60,0,0,174,46,1,0,0,0,175,176,5,62,0,0,176,48,1,0,0,
        0,177,178,5,40,0,0,178,50,1,0,0,0,179,180,5,41,0,0,180,52,1,0,0,
        0,181,182,5,123,0,0,182,54,1,0,0,0,183,184,5,125,0,0,184,56,1,0,
        0,0,185,186,5,59,0,0,186,58,1,0,0,0,187,188,5,44,0,0,188,60,1,0,
        0,0,189,190,5,58,0,0,190,62,1,0,0,0,191,192,5,47,0,0,192,193,5,47,
        0,0,193,197,1,0,0,0,194,196,8,4,0,0,195,194,1,0,0,0,196,199,1,0,
        0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,200,1,0,0,0,199,197,1,0,
        0,0,200,201,6,31,0,0,201,64,1,0,0,0,202,204,7,5,0,0,203,202,1,0,
        0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,207,1,0,
        0,0,207,208,6,32,0,0,208,66,1,0,0,0,9,0,130,136,141,147,153,155,
        197,205,1,6,0,0
    ]

class LittleDuckLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAM = 1
    MAIN = 2
    END = 3
    VAR = 4
    INT = 5
    FLOAT = 6
    VOID = 7
    IF = 8
    ELSE = 9
    WHILE = 10
    DO = 11
    PRINT = 12
    ID = 13
    CTE_INT = 14
    CTE_FLOAT = 15
    CTE_STRING = 16
    PLUS = 17
    MINUS = 18
    MULT = 19
    DIV = 20
    EQUAL = 21
    NEQ = 22
    LT = 23
    GT = 24
    LPAREN = 25
    RPAREN = 26
    LBRACE = 27
    RBRACE = 28
    SEMICOLON = 29
    COMMA = 30
    COLON = 31
    LINE_COMMENT = 32
    WS = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "'main'", "'end'", "'var'", "'int'", "'float'", 
            "'void'", "'if'", "'else'", "'while'", "'do'", "'print'", "'+'", 
            "'-'", "'*'", "'/'", "'='", "'!='", "'<'", "'>'", "'('", "')'", 
            "'{'", "'}'", "';'", "','", "':'" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM", "MAIN", "END", "VAR", "INT", "FLOAT", "VOID", "IF", 
            "ELSE", "WHILE", "DO", "PRINT", "ID", "CTE_INT", "CTE_FLOAT", 
            "CTE_STRING", "PLUS", "MINUS", "MULT", "DIV", "EQUAL", "NEQ", 
            "LT", "GT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMICOLON", 
            "COMMA", "COLON", "LINE_COMMENT", "WS" ]

    ruleNames = [ "PROGRAM", "MAIN", "END", "VAR", "INT", "FLOAT", "VOID", 
                  "IF", "ELSE", "WHILE", "DO", "PRINT", "ID", "CTE_INT", 
                  "CTE_FLOAT", "CTE_STRING", "PLUS", "MINUS", "MULT", "DIV", 
                  "EQUAL", "NEQ", "LT", "GT", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "SEMICOLON", "COMMA", "COLON", "LINE_COMMENT", 
                  "WS" ]

    grammarFileName = "LittleDuckLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


